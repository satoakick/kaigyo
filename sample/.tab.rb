#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.3
# from Racc grammar file "sql.y".
#

require 'racc/parser.rb'

#
class SqlParser < Racc::Parser

module_eval(<<'...end sql.y/module_eval...', 'sql.y', 13)

def parse(str)
  tokenizer = ::Kaigyo::Tokenizer.new(str)
  @q = tokenizer.token_analysis
  
  do_parse
end

def next_token
  @q.shift
end

...end sql.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,     4,     6,     8,     9,     8,    11,    11,    12 ]

racc_action_check = [
     0,     1,     2,     3,     4,     6,     7,    10,    11 ]

racc_action_pointer = [
    -2,     1,    -1,    -1,     4,   nil,     1,     1,   nil,   nil,
     2,     4,   nil ]

racc_action_default = [
    -6,    -6,    -6,    -6,    -6,    -1,    -6,    -2,    -4,    13,
    -3,    -6,    -5 ]

racc_goto_table = [
     7,     1,     2,    10,     5 ]

racc_goto_check = [
     4,     1,     2,     4,     3 ]

racc_goto_pointer = [
   nil,     1,     2,     2,    -3 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 7, :_reduce_1,
  2, 8, :_reduce_2,
  2, 9, :_reduce_3,
  1, 10, :_reduce_4,
  3, 10, :_reduce_5 ]

racc_reduce_n = 6

racc_shift_n = 13

racc_token_table = {
  false => 0,
  :error => 1,
  :SELECT => 2,
  :FROM => 3,
  :ITEM => 4,
  "," => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "SELECT",
  "FROM",
  "ITEM",
  "\",\"",
  "$start",
  "sql",
  "select_clause",
  "from_clause",
  "exprs" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'sql.y', 2)
  def _reduce_1(val, _values, result)
     result = ['sql', *val]
    result
  end
.,.,

module_eval(<<'.,.,', 'sql.y', 3)
  def _reduce_2(val, _values, result)
     select, exprs = val; result = [select, *exprs]
    result
  end
.,.,

module_eval(<<'.,.,', 'sql.y', 4)
  def _reduce_3(val, _values, result)
     from, exprs = val; result = [from, *exprs]
    result
  end
.,.,

module_eval(<<'.,.,', 'sql.y', 5)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'sql.y', 6)
  def _reduce_5(val, _values, result)
     result = [*exprs, val[2]]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SqlParser


if __FILE__ == $0
  ast = parser.parse
  binding.irb
rescue Racc::ParseError => e
  $stderr.puts e
end
