#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.3
# from Racc grammar file "sql.y".
#

require 'racc/parser.rb'

#
class SqlParser < Racc::Parser

module_eval(<<'...end sql.y/module_eval...', 'sql.y', 28)

load '../lib/kaigyo/tokenizer.rb'
def parse(str)
  tokenizer = ::Kaigyo::Tokenizer.new(str)
  @q = tokenizer.token_analysis
  @q << [false, '$']
  pp @q
  #@q = [[:item,1],[false,'$']]
  
  do_parse
end

def next_token
  @q.shift
end

...end sql.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    12,    36,    25,    26,     3,    17,    35,    28,    29,    30,
    31,    32,    25,    26,     4,     6,     8,     9,    12,     8,
    14,    18,    14,    19,    22,    23,    22,    22 ]

racc_action_check = [
    10,    27,    20,    20,     0,    10,    27,    22,    22,    22,
    22,    22,    33,    33,     1,     2,     3,     4,     5,     6,
     7,    12,    13,    14,    17,    18,    23,    24 ]

racc_action_pointer = [
     2,    14,    12,    11,    17,    14,    14,    12,   nil,   nil,
    -4,   nil,    16,    14,    18,   nil,   nil,    19,    19,   nil,
    -9,   nil,    -6,    21,    22,   nil,   nil,    -4,   nil,   nil,
   nil,   nil,   nil,     1,   nil,   nil,   nil ]

racc_action_default = [
   -26,   -26,   -26,   -26,   -26,    -4,   -26,    -2,   -11,    37,
    -7,    -5,   -26,    -3,   -26,    -1,    -6,   -26,   -26,   -12,
   -14,   -15,   -26,   -26,   -26,   -19,   -20,   -26,   -21,   -22,
   -23,   -24,   -25,    -8,   -16,   -17,   -18 ]

racc_goto_table = [
    20,     7,    11,     1,    13,     2,    33,    16,     5,    10,
    15,    34,    27 ]

racc_goto_check = [
     8,     6,     7,     1,     6,     2,     8,     7,     3,     4,
     5,    10,    12 ]

racc_goto_pointer = [
   nil,     3,     5,     6,     4,     0,    -2,    -3,   -17,   nil,
   -13,   nil,   -10 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,    24,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  4, 19, :_reduce_1,
  2, 20, :_reduce_2,
  2, 21, :_reduce_3,
  0, 22, :_reduce_none,
  1, 22, :_reduce_5,
  2, 22, :_reduce_6,
  0, 25, :_reduce_none,
  4, 25, :_reduce_8,
  0, 27, :_reduce_none,
  2, 27, :_reduce_10,
  1, 24, :_reduce_none,
  3, 24, :_reduce_12,
  0, 23, :_reduce_none,
  2, 23, :_reduce_14,
  1, 26, :_reduce_none,
  3, 26, :_reduce_16,
  3, 28, :_reduce_17,
  3, 28, :_reduce_18,
  1, 29, :_reduce_none,
  1, 29, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none ]

racc_reduce_n = 26

racc_shift_n = 37

racc_token_table = {
  false => 0,
  :error => 1,
  :select => 2,
  :from => 3,
  :join => 4,
  :identifier => 5,
  :on => 6,
  :group_by => 7,
  :punctuation => 8,
  :where => 9,
  :number => 10,
  :and => 11,
  :or => 12,
  :equal => 13,
  :less_than => 14,
  :less_than_equal => 15,
  :greater_than => 16,
  :greater_than_equal => 17 }

racc_nt_base = 18

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "select",
  "from",
  "join",
  "identifier",
  "on",
  "group_by",
  "punctuation",
  "where",
  "number",
  "and",
  "or",
  "equal",
  "less_than",
  "less_than_equal",
  "greater_than",
  "greater_than_equal",
  "$start",
  "sql",
  "select_clause",
  "from_clause",
  "join_clauses",
  "where_clause",
  "identifiers",
  "join_clause",
  "conditions",
  "group_clause",
  "condition",
  "and_or",
  "operator" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'sql.y', 2)
  def _reduce_1(val, _values, result)
     result = val.compact
    result
  end
.,.,

module_eval(<<'.,.,', 'sql.y', 3)
  def _reduce_2(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'sql.y', 4)
  def _reduce_3(val, _values, result)
     result = val
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'sql.y', 6)
  def _reduce_5(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'sql.y', 7)
  def _reduce_6(val, _values, result)
     result = val
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'sql.y', 9)
  def _reduce_8(val, _values, result)
     result = val
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'sql.y', 11)
  def _reduce_10(val, _values, result)
     result = val
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'sql.y', 13)
  def _reduce_12(val, _values, result)
     result = val
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'sql.y', 15)
  def _reduce_14(val, _values, result)
     result = val
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'sql.y', 17)
  def _reduce_16(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'sql.y', 18)
  def _reduce_17(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'sql.y', 19)
  def _reduce_18(val, _values, result)
     result = val
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SqlParser


if __FILE__ == $0
  begin
#str = gets.strip
    sql =<<-SQL
      select aaa from bbb
        left outer join ccc on aaa.id=ccc.id
        inner join ddd on ccc.id = ddd.id
      group by hoge.id
    SQL
    sql =<<-SQL
      select aaa from bbb
    SQL
#where aaa.id=1 or bbb.id=2
    ast = SqlParser.new.parse(sql)
    pp ast
  rescue Racc::ParseError => e
    $stderr.puts e
    $stderr.puts e.backtrace
  end
end
